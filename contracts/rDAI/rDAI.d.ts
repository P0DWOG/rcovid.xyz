/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "../commons";

interface RDAIAbiInterface extends ethers.utils.Interface {
  functions: {
    "ALLOCATION_STRATEGY_EXCHANGE_RATE_SCALE()": FunctionFragment;
    "INITIAL_SAVING_ASSET_CONVERSION_RATE()": FunctionFragment;
    "MAX_NUM_HAT_RECIPIENTS()": FunctionFragment;
    "MAX_UINT256()": FunctionFragment;
    "PROPORTION_BASE()": FunctionFragment;
    "SELF_HAT_ID()": FunctionFragment;
    "_guardCounter()": FunctionFragment;
    "_owner()": FunctionFragment;
    "accountStats(address)": FunctionFragment;
    "accounts(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "changeAllocationStrategy(address)": FunctionFragment;
    "changeHat(uint256)": FunctionFragment;
    "changeHatFor(address,uint256)": FunctionFragment;
    "createHat(address[],uint32[],bool)": FunctionFragment;
    "decimals()": FunctionFragment;
    "getAccountStats(address)": FunctionFragment;
    "getCurrentAllocationStrategy()": FunctionFragment;
    "getCurrentSavingStrategy()": FunctionFragment;
    "getGlobalStats()": FunctionFragment;
    "getHatByAddress(address)": FunctionFragment;
    "getHatByID(uint256)": FunctionFragment;
    "getHatStats(uint256)": FunctionFragment;
    "getMaximumHatID()": FunctionFragment;
    "getSavingAssetBalance()": FunctionFragment;
    "hatStats(uint256)": FunctionFragment;
    "ias()": FunctionFragment;
    "initialize(address,string,string,uint256)": FunctionFragment;
    "initialized()": FunctionFragment;
    "interestPayableOf(address)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "mintWithNewHat(uint256,address[],uint32[])": FunctionFragment;
    "mintWithSelectedHat(uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "payInterest(address)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "receivedLoanOf(address)": FunctionFragment;
    "receivedSavingsOf(address)": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "redeemAll()": FunctionFragment;
    "redeemAndTransfer(address,uint256)": FunctionFragment;
    "redeemAndTransferAll(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "savingAssetConversionRate()": FunctionFragment;
    "savingAssetOrignalAmount()": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferAll(address)": FunctionFragment;
    "transferAllFrom(address,address)": FunctionFragment;
    "transferAllowances(address,address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCode(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ALLOCATION_STRATEGY_EXCHANGE_RATE_SCALE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_SAVING_ASSET_CONVERSION_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_NUM_HAT_RECIPIENTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_UINT256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPORTION_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SELF_HAT_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_guardCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountStats",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "accounts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeAllocationStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeHat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeHatFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createHat",
    values: [string[], BigNumberish[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountStats",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentAllocationStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSavingStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHatByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getHatByID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHatStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumHatID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSavingAssetBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hatStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ias", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestPayableOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mintWithNewHat",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithSelectedHat",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payInterest", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receivedLoanOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "receivedSavingsOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "redeemAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemAndTransfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAndTransferAll",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "savingAssetConversionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "savingAssetOrignalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "transferAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferAllFrom",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllowances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updateCode", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "ALLOCATION_STRATEGY_EXCHANGE_RATE_SCALE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_SAVING_ASSET_CONVERSION_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_NUM_HAT_RECIPIENTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_UINT256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPORTION_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SELF_HAT_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_guardCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAllocationStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeHat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeHatFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createHat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentAllocationStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSavingStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHatByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHatByID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHatStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumHatID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSavingAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hatStats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ias", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestPayableOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithNewHat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithSelectedHat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivedLoanOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivedSavingsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemAndTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAndTransferAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "savingAssetConversionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "savingAssetOrignalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAllFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateCode", data: BytesLike): Result;

  events: {
    "AllocationStrategyChanged(address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "CodeUpdated(address)": EventFragment;
    "HatChanged(address,uint256,uint256)": EventFragment;
    "HatCreated(uint256)": EventFragment;
    "InterestPaid(address,uint256)": EventFragment;
    "LoansTransferred(address,address,uint256,bool,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllocationStrategyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CodeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HatChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HatCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoansTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class RDAIContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RDAIAbiInterface;

  functions: {
    ALLOCATION_STRATEGY_EXCHANGE_RATE_SCALE(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    INITIAL_SAVING_ASSET_CONVERSION_RATE(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_NUM_HAT_RECIPIENTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_UINT256(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROPORTION_BASE(overrides?: CallOverrides): Promise<[number]>;

    SELF_HAT_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    _guardCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    _owner(overrides?: CallOverrides): Promise<[string]>;

    accountStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cumulativeInterest: BigNumber }>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        hatID: BigNumber;
        rAmount: BigNumber;
        rInterest: BigNumber;
        lDebt: BigNumber;
        sInternalAmount: BigNumber;
      }
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeAllocationStrategy(
      allocationStrategy_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeHat(
      hatID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeHatFor(
      contractAddress: string,
      hatID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createHat(
      recipients: string[],
      proportions: BigNumberish[],
      doChangeHat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountStats(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          hatID: BigNumber;
          rAmount: BigNumber;
          rInterest: BigNumber;
          lDebt: BigNumber;
          sInternalAmount: BigNumber;
          rInterestPayable: BigNumber;
          cumulativeInterest: BigNumber;
          lRecipientsSum: BigNumber;
        }
      ] & {
        stats: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          hatID: BigNumber;
          rAmount: BigNumber;
          rInterest: BigNumber;
          lDebt: BigNumber;
          sInternalAmount: BigNumber;
          rInterestPayable: BigNumber;
          cumulativeInterest: BigNumber;
          lRecipientsSum: BigNumber;
        };
      }
    >;

    getCurrentAllocationStrategy(
      overrides?: CallOverrides
    ): Promise<[string] & { allocationStrategy: string }>;

    getCurrentSavingStrategy(overrides?: CallOverrides): Promise<[string]>;

    getGlobalStats(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          totalSupply: BigNumber;
          totalSavingsAmount: BigNumber;
        }
      ]
    >;

    getHatByAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[], number[]] & {
        hatID: BigNumber;
        recipients: string[];
        proportions: number[];
      }
    >;

    getHatByID(
      hatID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], number[]] & { recipients: string[]; proportions: number[] }
    >;

    getHatStats(
      hatID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          useCount: BigNumber;
          totalLoans: BigNumber;
          totalSavings: BigNumber;
        }
      ] & {
        stats: [BigNumber, BigNumber, BigNumber] & {
          useCount: BigNumber;
          totalLoans: BigNumber;
          totalSavings: BigNumber;
        };
      }
    >;

    getMaximumHatID(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { hatID: BigNumber }>;

    getSavingAssetBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rAmount: BigNumber;
        sOriginalAmount: BigNumber;
      }
    >;

    hatStats(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        useCount: BigNumber;
        totalLoans: BigNumber;
        totalInternalSavings: BigNumber;
      }
    >;

    ias(overrides?: CallOverrides): Promise<[string]>;

    "initialize(address,string,string,uint256)"(
      allocationStrategy: string,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      allocationStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    interestPayableOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWithNewHat(
      mintAmount: BigNumberish,
      recipients: string[],
      proportions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWithSelectedHat(
      mintAmount: BigNumberish,
      hatID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payInterest(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    receivedLoanOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    receivedSavingsOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemAndTransfer(
      redeemTo: string,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemAndTransferAll(
      redeemTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    savingAssetConversionRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    savingAssetOrignalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAll(
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAllFrom(
      src: string,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAllowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferFrom(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCode(
      newCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ALLOCATION_STRATEGY_EXCHANGE_RATE_SCALE(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  INITIAL_SAVING_ASSET_CONVERSION_RATE(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MAX_NUM_HAT_RECIPIENTS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

  PROPORTION_BASE(overrides?: CallOverrides): Promise<number>;

  SELF_HAT_ID(overrides?: CallOverrides): Promise<BigNumber>;

  _guardCounter(overrides?: CallOverrides): Promise<BigNumber>;

  _owner(overrides?: CallOverrides): Promise<string>;

  accountStats(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  accounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      hatID: BigNumber;
      rAmount: BigNumber;
      rInterest: BigNumber;
      lDebt: BigNumber;
      sInternalAmount: BigNumber;
    }
  >;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  changeAllocationStrategy(
    allocationStrategy_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeHat(
    hatID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeHatFor(
    contractAddress: string,
    hatID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createHat(
    recipients: string[],
    proportions: BigNumberish[],
    doChangeHat: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountStats(
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      hatID: BigNumber;
      rAmount: BigNumber;
      rInterest: BigNumber;
      lDebt: BigNumber;
      sInternalAmount: BigNumber;
      rInterestPayable: BigNumber;
      cumulativeInterest: BigNumber;
      lRecipientsSum: BigNumber;
    }
  >;

  getCurrentAllocationStrategy(overrides?: CallOverrides): Promise<string>;

  getCurrentSavingStrategy(overrides?: CallOverrides): Promise<string>;

  getGlobalStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalSupply: BigNumber;
      totalSavingsAmount: BigNumber;
    }
  >;

  getHatByAddress(
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string[], number[]] & {
      hatID: BigNumber;
      recipients: string[];
      proportions: number[];
    }
  >;

  getHatByID(
    hatID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], number[]] & { recipients: string[]; proportions: number[] }
  >;

  getHatStats(
    hatID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      useCount: BigNumber;
      totalLoans: BigNumber;
      totalSavings: BigNumber;
    }
  >;

  getMaximumHatID(overrides?: CallOverrides): Promise<BigNumber>;

  getSavingAssetBalance(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { rAmount: BigNumber; sOriginalAmount: BigNumber }
  >;

  hatStats(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      useCount: BigNumber;
      totalLoans: BigNumber;
      totalInternalSavings: BigNumber;
    }
  >;

  ias(overrides?: CallOverrides): Promise<string>;

  "initialize(address,string,string,uint256)"(
    allocationStrategy: string,
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    allocationStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  interestPayableOf(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  mint(
    mintAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWithNewHat(
    mintAmount: BigNumberish,
    recipients: string[],
    proportions: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWithSelectedHat(
    mintAmount: BigNumberish,
    hatID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  payInterest(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  receivedLoanOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  receivedSavingsOf(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeem(
    redeemTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemAndTransfer(
    redeemTo: string,
    redeemTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemAndTransferAll(
    redeemTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  savingAssetConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

  savingAssetOrignalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAll(
    dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAllFrom(
    src: string,
    dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAllowances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferFrom(
    src: string,
    dst: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCode(
    newCode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ALLOCATION_STRATEGY_EXCHANGE_RATE_SCALE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    INITIAL_SAVING_ASSET_CONVERSION_RATE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_NUM_HAT_RECIPIENTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

    PROPORTION_BASE(overrides?: CallOverrides): Promise<number>;

    SELF_HAT_ID(overrides?: CallOverrides): Promise<BigNumber>;

    _guardCounter(overrides?: CallOverrides): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<string>;

    accountStats(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        hatID: BigNumber;
        rAmount: BigNumber;
        rInterest: BigNumber;
        lDebt: BigNumber;
        sInternalAmount: BigNumber;
      }
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeAllocationStrategy(
      allocationStrategy_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeHat(hatID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    changeHatFor(
      contractAddress: string,
      hatID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createHat(
      recipients: string[],
      proportions: BigNumberish[],
      doChangeHat: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountStats(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        hatID: BigNumber;
        rAmount: BigNumber;
        rInterest: BigNumber;
        lDebt: BigNumber;
        sInternalAmount: BigNumber;
        rInterestPayable: BigNumber;
        cumulativeInterest: BigNumber;
        lRecipientsSum: BigNumber;
      }
    >;

    getCurrentAllocationStrategy(overrides?: CallOverrides): Promise<string>;

    getCurrentSavingStrategy(overrides?: CallOverrides): Promise<string>;

    getGlobalStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalSupply: BigNumber;
        totalSavingsAmount: BigNumber;
      }
    >;

    getHatByAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[], number[]] & {
        hatID: BigNumber;
        recipients: string[];
        proportions: number[];
      }
    >;

    getHatByID(
      hatID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], number[]] & { recipients: string[]; proportions: number[] }
    >;

    getHatStats(
      hatID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        useCount: BigNumber;
        totalLoans: BigNumber;
        totalSavings: BigNumber;
      }
    >;

    getMaximumHatID(overrides?: CallOverrides): Promise<BigNumber>;

    getSavingAssetBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rAmount: BigNumber;
        sOriginalAmount: BigNumber;
      }
    >;

    hatStats(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        useCount: BigNumber;
        totalLoans: BigNumber;
        totalInternalSavings: BigNumber;
      }
    >;

    ias(overrides?: CallOverrides): Promise<string>;

    "initialize(address,string,string,uint256)"(
      allocationStrategy: string,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      allocationStrategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    interestPayableOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    mint(mintAmount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    mintWithNewHat(
      mintAmount: BigNumberish,
      recipients: string[],
      proportions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintWithSelectedHat(
      mintAmount: BigNumberish,
      hatID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    payInterest(owner: string, overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    receivedLoanOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receivedSavingsOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    redeemAll(overrides?: CallOverrides): Promise<boolean>;

    redeemAndTransfer(
      redeemTo: string,
      redeemTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    redeemAndTransferAll(
      redeemTo: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    savingAssetConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    savingAssetOrignalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferAll(dst: string, overrides?: CallOverrides): Promise<boolean>;

    transferAllFrom(
      src: string,
      dst: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferAllowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCode(newCode: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AllocationStrategyChanged(
      strategy?: null,
      conversionRate?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { strategy: string; conversionRate: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    CodeUpdated(
      newCode?: null
    ): TypedEventFilter<[string], { newCode: string }>;

    HatChanged(
      account?: string | null,
      oldHatID?: BigNumberish | null,
      newHatID?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; oldHatID: BigNumber; newHatID: BigNumber }
    >;

    HatCreated(
      hatID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { hatID: BigNumber }>;

    InterestPaid(
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient: string; amount: BigNumber }
    >;

    LoansTransferred(
      owner?: string | null,
      recipient?: string | null,
      hatId?: BigNumberish | null,
      isDistribution?: null,
      redeemableAmount?: null,
      internalSavingsAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean, BigNumber, BigNumber],
      {
        owner: string;
        recipient: string;
        hatId: BigNumber;
        isDistribution: boolean;
        redeemableAmount: BigNumber;
        internalSavingsAmount: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    ALLOCATION_STRATEGY_EXCHANGE_RATE_SCALE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    INITIAL_SAVING_ASSET_CONVERSION_RATE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_NUM_HAT_RECIPIENTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

    PROPORTION_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    SELF_HAT_ID(overrides?: CallOverrides): Promise<BigNumber>;

    _guardCounter(overrides?: CallOverrides): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    accountStats(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    accounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeAllocationStrategy(
      allocationStrategy_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeHat(
      hatID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeHatFor(
      contractAddress: string,
      hatID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createHat(
      recipients: string[],
      proportions: BigNumberish[],
      doChangeHat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountStats(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentAllocationStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentSavingStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalStats(overrides?: CallOverrides): Promise<BigNumber>;

    getHatByAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHatByID(
      hatID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHatStats(
      hatID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaximumHatID(overrides?: CallOverrides): Promise<BigNumber>;

    getSavingAssetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    hatStats(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ias(overrides?: CallOverrides): Promise<BigNumber>;

    "initialize(address,string,string,uint256)"(
      allocationStrategy: string,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      allocationStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    interestPayableOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWithNewHat(
      mintAmount: BigNumberish,
      recipients: string[],
      proportions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWithSelectedHat(
      mintAmount: BigNumberish,
      hatID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payInterest(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    receivedLoanOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receivedSavingsOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemAndTransfer(
      redeemTo: string,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemAndTransferAll(
      redeemTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    savingAssetConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    savingAssetOrignalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAll(
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAllFrom(
      src: string,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAllowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCode(
      newCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ALLOCATION_STRATEGY_EXCHANGE_RATE_SCALE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_SAVING_ASSET_CONVERSION_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_NUM_HAT_RECIPIENTS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_UINT256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROPORTION_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SELF_HAT_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _guardCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeAllocationStrategy(
      allocationStrategy_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeHat(
      hatID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeHatFor(
      contractAddress: string,
      hatID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createHat(
      recipients: string[],
      proportions: BigNumberish[],
      doChangeHat: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountStats(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentAllocationStrategy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentSavingStrategy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHatByAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHatByID(
      hatID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHatStats(
      hatID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaximumHatID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSavingAssetBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hatStats(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ias(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialize(address,string,string,uint256)"(
      allocationStrategy: string,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      allocationStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestPayableOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWithNewHat(
      mintAmount: BigNumberish,
      recipients: string[],
      proportions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWithSelectedHat(
      mintAmount: BigNumberish,
      hatID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payInterest(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivedLoanOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receivedSavingsOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemAndTransfer(
      redeemTo: string,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemAndTransferAll(
      redeemTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    savingAssetConversionRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    savingAssetOrignalAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAll(
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAllFrom(
      src: string,
      dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAllowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCode(
      newCode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
